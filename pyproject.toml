[build-system]
requires = ["hatchling", "hatch-regex-commit"]
build-backend = "hatchling.build"

[project]
name = "nextline-alert"
description = 'A plugin of nextline-graphql. Emit alerts to Campana'
readme = "README.md"
requires-python = ">=3.10"
license = "MIT"
keywords = []
authors = [
  { name = "Simons Observatory", email = "so_software@simonsobservatory.org" },
]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
]
dependencies = ["requests>=2.31"]
dynamic = ["version"]

[project.optional-dependencies]
tests = [
  "pytest-asyncio>=0.23",
  "pytest-cov>=4.1",
  "pytest-timeout>=2.2",
  "pytest>=7.4",
]

[project.urls]
Documentation = "https://github.com/simonsobs/nextline-alert#readme"
Issues = "https://github.com/simonsobs/nextline-alert/issues"
Source = "https://github.com/simonsobs/nextline-alert"

[project.entry-points."nextline_graphql"]
alert = "nextline_alert:Plugin"

[tool.hatch.version]
source = "regex_commit"
path = "src/nextline_alert/__about__.py"
tag_sign = false

[tool.hatch.envs.default]
dependencies = ["coverage[toml]>=6.5", "pytest"]
[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = ["- coverage combine", "coverage report"]
cov = ["test-cov", "cov-report"]

[[tool.hatch.envs.all.matrix]]
python = ["3.10", "3.11", "3.12"]

[tool.hatch.envs.lint]
detached = true
dependencies = ["black>=23.1.0", "mypy>=1.0.0", "ruff>=0.0.243"]
[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src/nextline_alert tests}"
style = ["ruff {args:.}", "black --check --diff {args:.}"]
fmt = ["black {args:.}", "ruff --fix {args:.}", "style"]
all = ["style", "typing"]

[tool.black]
skip-string-normalization = true
target_version = ['py310', 'py311', 'py312']

[tool.ruff]
target-version = "py37"
line-length = 120
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105",
  "S106",
  "S107",
  # Ignore complexity
  "C901",
  "PLR0911",
  "PLR0912",
  "PLR0913",
  "PLR0915",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.isort]
known-first-party = ["nextline_alert"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.coverage.run]
source_pkgs = ["nextline_alert", "tests"]
branch = true
parallel = true
omit = ["src/nextline_alert/__about__.py"]

[tool.coverage.paths]
nextline_alert = ["src/nextline_alert", "*/nextline-alert/src/nextline_alert"]
tests = ["tests", "*/nextline-alert/tests"]

[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]


[tool.isort]
profile = "black"

[tool.mypy]
plugins = "strawberry.ext.mypy_plugin"

[[tool.mypy.overrides]]
module = ["dynaconf.*", "apluggy.*"]
ignore_missing_imports = true
